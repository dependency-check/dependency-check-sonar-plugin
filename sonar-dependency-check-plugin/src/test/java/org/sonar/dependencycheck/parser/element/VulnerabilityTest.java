/*
 * Dependency-Check Plugin for SonarQube
 * Copyright (C) 2015-2021 dependency-check
 * philipp.dallig@gmail.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package org.sonar.dependencycheck.parser.element;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.File;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.sonar.api.batch.sensor.internal.SensorContextTester;
import org.sonar.api.config.Configuration;

class VulnerabilityTest {

    private Configuration config;
    @BeforeEach
    public void init() {
        final SensorContextTester context = SensorContextTester.create(new File(""));
        config = context.config();
    }

    @Test
    void testcvssScore() {
        CvssV2 cvssV2 = new CvssV2(5.0f, "HIGH");
        CvssV3 cvssV3 = new CvssV3(7.0f, "HIGHEST");
        Vulnerability a = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, cvssV2, cvssV3, null);
        assertEquals(5.0f, a.getCvssScore(false, config));
        assertEquals(7.0f, a.getCvssScore(config));
        assertEquals(7.0f, a.getCvssScore(true, config));

        Vulnerability b = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, cvssV2, null, null);
        assertEquals(5.0f, b.getCvssScore(false, config));
        assertEquals(5.0f, b.getCvssScore(config));
        assertEquals(5.0f, b.getCvssScore(true, config));

        Vulnerability c = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, null, cvssV3, null);
        assertEquals(7.0f, c.getCvssScore(false, config));
        assertEquals(7.0f, c.getCvssScore(config));
        assertEquals(7.0f, c.getCvssScore(true, config));

        Vulnerability d = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, null, null, null);
        // It's 4.0f because we have no severity and default severity is MEDIUM
        assertEquals(4.0f, d.getCvssScore(false, config));
        assertEquals(4.0f, d.getCvssScore(config));
        assertEquals(4.0f, d.getCvssScore(true, config));

        Vulnerability e = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, null, null, "Unknown");
        // It's 4.0f because we have severity is unknown and default severity is MEDIUM
        assertEquals(4.0f, e.getCvssScore(false, config));
        assertEquals(4.0f, e.getCvssScore(config));
        assertEquals(4.0f, e.getCvssScore(true, config));
    }

    @Test
    void testcvssSeverity() {
        CvssV2 cvssV2 = new CvssV2(5.0f, "HIGH");
        CvssV3 cvssV3 = new CvssV3(7.0f, "HIGHEST");
        Vulnerability a = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, cvssV2, cvssV3, null);
        assertEquals("HIGH", a.getSeverity(false));
        assertEquals("HIGHEST", a.getSeverity());
        assertEquals("HIGHEST", a.getSeverity(true));

        Vulnerability b = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, cvssV2, null, null);
        assertEquals("HIGH", b.getSeverity(false));
        assertEquals("HIGH", b.getSeverity());
        assertEquals("HIGH", b.getSeverity(true));

        Vulnerability c = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, null, cvssV3, null);
        assertEquals("HIGHEST", c.getSeverity(false));
        assertEquals("HIGHEST", c.getSeverity());
        assertEquals("HIGHEST", c.getSeverity(true));

        Vulnerability d = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, null, null, null);
        assertEquals("MEDIUM", d.getSeverity(false));
        assertEquals("MEDIUM", d.getSeverity());
        assertEquals("MEDIUM", d.getSeverity(true));

        Vulnerability e = new Vulnerability("MyVulnerabilty", "NVD", "MyVulnerabiltyDescription", null, null, null, "Unknown");
        assertEquals("MEDIUM", e.getSeverity(false));
        assertEquals("MEDIUM", e.getSeverity());
        assertEquals("MEDIUM", e.getSeverity(true));
    }
}

